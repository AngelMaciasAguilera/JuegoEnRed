/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import controladores.ConCliente;
import java.io.IOException;
import java.net.Socket;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import modelos.Juego;
import modelos.Pregunta;

/**
 *
 * Clase que representa la interfaz gráfica del cliente en un juego de preguntas y respuestas.
 * @author Angel
 */
public class JFCliente extends javax.swing.JFrame {
    
    // Variables de instancia para mantener el estado del juego y la información de conexión
    private ConCliente cc;
    private boolean haContestado = false;
    private Juego juego;
    private int puerto = 6010;
    private String ipCliente = "localhost";
    private String nombre = "Angel";
    private String respuestaCorrecta = "";
    private String respuestaElegida = "";
    private int puntosServidor = 0;

    /**
     * Creates new form JFCliente
     */
    public JFCliente() {
        initComponents();
        juego = new Juego();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        puntosCliente = new javax.swing.JLabel();
        numeroRondas = new javax.swing.JLabel();
        indicadorRondaCliente = new javax.swing.JLabel();
        limiteRondas = new javax.swing.JLabel();
        preguntaCliente = new javax.swing.JLabel();
        opcion1Cliente = new javax.swing.JButton();
        opcion2Cliente = new javax.swing.JButton();
        opcion3Cliente = new javax.swing.JButton();
        opcion4Cliente = new javax.swing.JButton();
        btUnirseAPartidaCliente = new javax.swing.JButton();
        Spuntos = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cliente");
        setMinimumSize(new java.awt.Dimension(750, 550));
        setResizable(false);
        getContentPane().setLayout(null);

        puntosCliente.setText("0");
        getContentPane().add(puntosCliente);
        puntosCliente.setBounds(90, 30, 50, 16);

        numeroRondas.setText("Ronda:");
        getContentPane().add(numeroRondas);
        numeroRondas.setBounds(270, 30, 50, 16);

        indicadorRondaCliente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        indicadorRondaCliente.setText("1");
        getContentPane().add(indicadorRondaCliente);
        indicadorRondaCliente.setBounds(310, 30, 30, 16);

        limiteRondas.setText("/15");
        getContentPane().add(limiteRondas);
        limiteRondas.setBounds(340, 30, 40, 16);

        preguntaCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        preguntaCliente.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        preguntaCliente.setText("Pregunta");
        preguntaCliente.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        preguntaCliente.setAutoscrolls(true);
        preguntaCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        preguntaCliente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        preguntaCliente.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        getContentPane().add(preguntaCliente);
        preguntaCliente.setBounds(180, 70, 310, 90);

        opcion1Cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion1ClienteActionPerformed(evt);
            }
        });
        getContentPane().add(opcion1Cliente);
        opcion1Cliente.setBounds(230, 170, 183, 50);

        opcion2Cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion2ClienteActionPerformed(evt);
            }
        });
        getContentPane().add(opcion2Cliente);
        opcion2Cliente.setBounds(230, 250, 183, 50);

        opcion3Cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion3ClienteActionPerformed(evt);
            }
        });
        getContentPane().add(opcion3Cliente);
        opcion3Cliente.setBounds(230, 330, 183, 50);

        opcion4Cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion4ClienteActionPerformed(evt);
            }
        });
        getContentPane().add(opcion4Cliente);
        opcion4Cliente.setBounds(230, 410, 183, 50);

        btUnirseAPartidaCliente.setText("Unirse a una partida");
        btUnirseAPartidaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUnirseAPartidaClienteActionPerformed(evt);
            }
        });
        getContentPane().add(btUnirseAPartidaCliente);
        btUnirseAPartidaCliente.setBounds(500, 20, 180, 40);

        Spuntos.setText("Puntos:");
        getContentPane().add(Spuntos);
        Spuntos.setBounds(40, 30, 50, 16);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // En los botones cambiamos el estado de ha contestado a true y obtenemos el texto de la respuesta escogida para luego compararla con la respuesta correcta
    private void opcion1ClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion1ClienteActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion1Cliente.getText();
    }//GEN-LAST:event_opcion1ClienteActionPerformed

    private void opcion2ClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion2ClienteActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion2Cliente.getText();
    }//GEN-LAST:event_opcion2ClienteActionPerformed

    private void opcion3ClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion3ClienteActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion3Cliente.getText();
    }//GEN-LAST:event_opcion3ClienteActionPerformed

    private void opcion4ClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion4ClienteActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion4Cliente.getText();
    }//GEN-LAST:event_opcion4ClienteActionPerformed

    private void btUnirseAPartidaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUnirseAPartidaClienteActionPerformed
        // Se crea una instancia de ConCliente para gestionar la conexión con el servidor
        cc = new ConCliente(nombre, puerto, ipCliente);
        // Se verifica  si el servidor ha comenzado la partida
        if (cc.confirmarInicioPartida() == true) {
            JOptionPane.showMessageDialog(this, "El juego va a comenzar");
            this.btUnirseAPartidaCliente.setEnabled(false);
            fJuego();// Iniciar el juego
        } else {
            JOptionPane.showMessageDialog(this, "Ocurrio un fallo al recibir informacion del servidor, por favor, reinicie la aplicacion");
        }

    }//GEN-LAST:event_btUnirseAPartidaClienteActionPerformed

    // Métodos auxiliares para modificar la pregunta, el estado y el flujo del juego
    private void modificarPregunta() {
        // Obtener una pregunta aleatoria del juego
        Pregunta pregunta = juego.obtenerPreguntaAleatoria();

        // Verifica si la pregunta obtenida es nula
        if (pregunta == null) {
            System.out.println("Pregunta invalida.");
            return;
        }
        // Configurar la interfaz con la pregunta y las posibles respuestas
        this.preguntaCliente.setText("<html>" + pregunta.getPregunta() + "<html>");
        List<String> posiblesRespuestas = pregunta.getPosiblesRespuestas();

        // Verifica si hay al menos 4 posibles respuestas
        if (posiblesRespuestas.size() < 4) {
            System.out.println("La pregunta no tiene suficientes respuestas.");
            return;
        }

        this.opcion1Cliente.setText(posiblesRespuestas.get(0));
        this.opcion2Cliente.setText(posiblesRespuestas.get(1));
        this.opcion3Cliente.setText(posiblesRespuestas.get(2));
        this.opcion4Cliente.setText(posiblesRespuestas.get(3));
        this.respuestaCorrecta = pregunta.getRespuesta();
    }
    
    // Modificar el estado de los botones de respuesta
    private void modificarEstado(boolean estado) {
        this.opcion1Cliente.setEnabled(estado);
        this.opcion2Cliente.setEnabled(estado);
        this.opcion3Cliente.setEnabled(estado);
        this.opcion4Cliente.setEnabled(estado);
    }

    private void fJuego() {
        // Crear un hilo para ejecutar el juego de forma concurrente
        Thread juegoThread = new Thread(() -> {
            String resultado = "";
            int puntos = 0;
            //Realizar las 15 rondas 
            for (int i = 1; i < 16; i++) {
                this.indicadorRondaCliente.setText(String.valueOf(i));
                SwingUtilities.invokeLater(() -> {
                    modificarPregunta();
                    modificarEstado(true); // Habilitar botones
                });

                // Esperar hasta que el usuario haya contestado
                while (!haContestado) {
                    try {
                        Thread.sleep(300);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                
                // Verificar si la respuesta del usuario es correcta y actualizar los puntos
                if (this.respuestaElegida.equals(this.respuestaCorrecta)) {
                    this.juego.setPuntos(60);
                    this.puntosCliente.setText(String.valueOf(this.juego.getPuntos()));
                }

                // Una vez que el usuario ha contestado, modificar la pregunta nuevamente
                SwingUtilities.invokeLater(() -> {
                    modificarPregunta();
                });

                haContestado = false; // Reiniciar la variable después de la respuesta ya que debe contestar la siguiente pregunta
                // Verificar si es la última ronda
                if (i == 15) {
                    modificarEstado(false);// Deshabilitar botones de respuesta
                    SwingUtilities.invokeLater(() -> {
                        // Mostrar mensaje de finalización del juego en la interfaz
                        this.preguntaCliente.setText("<html>El juego ha finalizado si quiere puede jugar otra ronda<html>");
                        this.opcion1Cliente.setText("Finalizado");
                        this.opcion2Cliente.setText("Finalizado");
                        this.opcion3Cliente.setText("Finalizado");
                        this.opcion4Cliente.setText("Finalizado");
                    });
                    try {
                        // Notificar al servidor que el cliente ha finalizado la partida
                        this.cc.notificarRespuestaFinalizada();
                    } catch (IOException ex) {
                        Logger.getLogger(JFServidor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    // Comprobar el resultado del juego con el servidor
                    if (cc.comprobarRival(this) == true) {
                        try {
                            // Enviar la puntuación al servidor
                            this.cc.notificarPuntuacionCliente(this.juego.getPuntos());
                            // Recibir la puntuación del servidor
                            this.puntosServidor = this.cc.recibirPuntuacionServidor();
                        } catch (IOException ex) {
                            Logger.getLogger(JFServidor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            // Esperar antes de mostrar el resultado final
                            Thread.sleep(3000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(JFCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                         // Comprobar el resultado final y mostrar un mensaje
                        switch (comprobarResultadoCliente(this.puntosServidor)) {
                            case 0:
                                resultado = "Habeis quedado empatados";
                                break;
                            case -1:
                                resultado = "Has perdido.\n GAME OVER :( ";
                                break;
                            case 1:
                                resultado = "Has ganado. ¡Enhorabuena!";
                                break;
                        }
                        JOptionPane.showMessageDialog(this, resultado);
                        this.dispose();
                    }

                }
            }
        });

        juegoThread.start();// Iniciar el hilo del juego

    }
    
    // Método sincronizado para comprobar el resultado final con el servidor
    private synchronized int comprobarResultadoCliente(int puntosCliente) {
        int recuentoPuntos = 0;
        if (this.juego.getPuntos() > puntosCliente) {
            recuentoPuntos = 1;
        } else if (puntosCliente > this.juego.getPuntos()) {
            recuentoPuntos = -1;
        }
        return recuentoPuntos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Spuntos;
    private javax.swing.JButton btUnirseAPartidaCliente;
    private javax.swing.JLabel indicadorRondaCliente;
    private javax.swing.JLabel limiteRondas;
    private javax.swing.JLabel numeroRondas;
    private javax.swing.JButton opcion1Cliente;
    private javax.swing.JButton opcion2Cliente;
    private javax.swing.JButton opcion3Cliente;
    private javax.swing.JButton opcion4Cliente;
    private javax.swing.JLabel preguntaCliente;
    private javax.swing.JLabel puntosCliente;
    // End of variables declaration//GEN-END:variables
}
