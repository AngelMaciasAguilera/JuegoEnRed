/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import controladores.ConServidor;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.IOException;
import java.net.Socket;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import modelos.*;

/**
 * Esta clase representa la interfaz gr치fica del servidor del juego de preguntas
 * y respuestas. El servidor espera a que un cliente se conecte para iniciar la
 * partida. Durante la partida, el servidor muestra preguntas y espera las
 * respuestas del cliente. Al finalizar el juego, muestra el resultado y cierra
 * la aplicaci칩n.
 *
 * @author Angel
 */
public class JFServidor extends javax.swing.JFrame {

    private ConServidor cs; // Controlador del servidor
    private boolean haContestado = false; // Bandera para indicar si se ha recibido una respuesta del cliente
    private Juego juego; // Objeto que representa el juego
    private int puerto = 6010; // Puerto de conexi칩n del servidor
    private String respuestaCorrecta = ""; // Respuesta correcta de la pregunta actual
    private String respuestaElegida = ""; // Respuesta elegida por el cliente
    private String nombre = "Servidor"; // Nombre del servidor
    private Socket cliente; // Socket del cliente conectado
    private int puntosCliente; // Puntos obtenidos por el cliente

    /**
     * Creates new form JFPrincipal
     */
    public JFServidor() {
        initComponents();

        cs = new ConServidor(nombre, puerto);
        juego = new Juego();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opcion1Servidor = new javax.swing.JButton();
        opcion2Servidor = new javax.swing.JButton();
        preguntaServidor = new javax.swing.JLabel();
        opcion3Servidor = new javax.swing.JButton();
        opcion4Servidor = new javax.swing.JButton();
        btEmpezarJuego = new javax.swing.JButton();
        Spuntos = new javax.swing.JLabel();
        puntosServidor = new javax.swing.JLabel();
        numeroRondas = new javax.swing.JLabel();
        indicadorRondaServidor = new javax.swing.JLabel();
        limiteRondas = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor");
        setMinimumSize(new java.awt.Dimension(575, 575));
        setPreferredSize(new java.awt.Dimension(700, 460));
        setResizable(false);

        opcion1Servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion1ServidorActionPerformed(evt);
            }
        });

        opcion2Servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion2ServidorActionPerformed(evt);
            }
        });

        preguntaServidor.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        preguntaServidor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        preguntaServidor.setText("Pregunta");
        preguntaServidor.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        preguntaServidor.setAutoscrolls(true);
        preguntaServidor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        preguntaServidor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        preguntaServidor.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        opcion3Servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion3ServidorActionPerformed(evt);
            }
        });

        opcion4Servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion4ServidorActionPerformed(evt);
            }
        });

        btEmpezarJuego.setText("Empezar partida");
        btEmpezarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEmpezarJuegoActionPerformed(evt);
            }
        });

        Spuntos.setText("Puntos:");

        puntosServidor.setText("0");

        numeroRondas.setText("Ronda:");

        indicadorRondaServidor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        indicadorRondaServidor.setText("1");

        limiteRondas.setText("/15");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(Spuntos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(puntosServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numeroRondas, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(indicadorRondaServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(limiteRondas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105)
                .addComponent(btEmpezarJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(180, 180, 180)
                .addComponent(preguntaServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(opcion1Servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(opcion2Servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(opcion3Servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(opcion4Servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btEmpezarJuego, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Spuntos)
                    .addComponent(puntosServidor)
                    .addComponent(numeroRondas)
                    .addComponent(indicadorRondaServidor)
                    .addComponent(limiteRondas))
                .addGap(10, 10, 10)
                .addComponent(preguntaServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(opcion1Servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(opcion2Servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(opcion3Servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(opcion4Servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Inicia un hilo de espera para que un cliente se conecte.
     */
    private void btEmpezarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEmpezarJuegoActionPerformed
        Thread hiloEspera = new Thread(() -> {
            try {
                // Muestra la ventana de espera mientras se est치 esperando a que un cliente se conecte
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, "Esperando a que alg칰n jugador se conecte...");
                });
                // Espera a que alg칰n cliente se conecte
                this.cliente = cs.getServidor().accept();
                cs.notificarInicioJuego(this.cliente);
                this.btEmpezarJuego.setEnabled(false);
                fJuego(); // Inicia el juego
                JOptionPane.showMessageDialog(this, "Se ha conectado un jugador correctamente");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
        // Inicia el hilo de espera
        hiloEspera.start();


    }//GEN-LAST:event_btEmpezarJuegoActionPerformed
    // En los botones cambiamos el estado de ha contestado a true y obtenemos el texto de la respuesta escogida para luego compararla con la respuesta correcta
    private void opcion1ServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion1ServidorActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion1Servidor.getText();
    }//GEN-LAST:event_opcion1ServidorActionPerformed

    private void opcion2ServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion2ServidorActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion2Servidor.getText();
    }//GEN-LAST:event_opcion2ServidorActionPerformed

    private void opcion3ServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion3ServidorActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion3Servidor.getText();
    }//GEN-LAST:event_opcion3ServidorActionPerformed

    private void opcion4ServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion4ServidorActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion4Servidor.getText();
    }//GEN-LAST:event_opcion4ServidorActionPerformed

    /**
     * Modifica la pregunta en la interfaz con una pregunta aleatoria del juego.
     */
    private void modificarPregunta() {
        Pregunta pregunta = juego.obtenerPreguntaAleatoria();

        // Verifica si la pregunta obtenida es nula
        if (pregunta == null) {
            System.out.println("Pregunta inv치lida.");
            return;
        }

        this.preguntaServidor.setText("<html>" + pregunta.getPregunta() + "<html>");
        List<String> posiblesRespuestas = pregunta.getPosiblesRespuestas();

        // Verifica si hay al menos 4 posibles respuestas
        if (posiblesRespuestas.size() < 4) {
            System.out.println("La pregunta no tiene suficientes respuestas.");
            return;
        }

        this.opcion1Servidor.setText(posiblesRespuestas.get(0));
        this.opcion2Servidor.setText(posiblesRespuestas.get(1));
        this.opcion3Servidor.setText(posiblesRespuestas.get(2));
        this.opcion4Servidor.setText(posiblesRespuestas.get(3));
        this.respuestaCorrecta = pregunta.getRespuesta();
    }

    /**
     * M칠todo principal que gestiona el flujo del juego.
     */
    private void fJuego() {
        Thread juegoThread = new Thread(() -> {
            String resultado = "";
            for (int i = 1; i < 16; i++) { // 15 rondas de juego
                this.indicadorRondaServidor.setText(String.valueOf(i));
                SwingUtilities.invokeLater(() -> {
                    modificarPregunta();
                    modificarEstado(true); // Habilitar botones de respuesta
                });

                // Esperar hasta que el usuario haya contestado
                while (!haContestado) {
                    try {
                        Thread.sleep(300);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                if (this.respuestaElegida.equals(this.respuestaCorrecta)) {
                    this.juego.setPuntos(60); // Sumar puntos al juego
                    this.puntosServidor.setText(String.valueOf(this.juego.getPuntos()));
                }

                // Una vez que el usuario ha contestado, modificar la pregunta nuevamente
                SwingUtilities.invokeLater(() -> {
                    modificarPregunta();
                });

                haContestado = false; // Reiniciar la bandera despu칠s de la respuesta
                if (i == 15) { // Verificar si es la 칰ltima ronda
                    modificarEstado(false); // Deshabilitar botones de respuesta
                    SwingUtilities.invokeLater(() -> {
                        this.preguntaServidor.setText("<html>El juego ha finalizado. Si desea, puede jugar otra ronda<html>");
                        this.opcion1Servidor.setText("Finalizado");
                        this.opcion2Servidor.setText("Finalizado");
                        this.opcion3Servidor.setText("Finalizado");
                        this.opcion4Servidor.setText("Finalizado");
                    });
                    try {
                        this.cs.notificarRespuestaFinalizada(this.cliente);
                    } catch (IOException ex) {
                        Logger.getLogger(JFServidor.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    // Comprobar resultado con el cliente
                    if (cs.comprobarRival(this) == true) {
                        try {
                            this.cs.notificarPuntuacionServidor(this.juego.getPuntos(), cliente);
                            this.puntosCliente = this.cs.recibirPuntuacionCliente();
                        } catch (IOException ex) {
                            Logger.getLogger(JFServidor.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            Thread.sleep(3000); // Esperar 3 segundos antes de mostrar el resultado final
                        } catch (InterruptedException ex) {
                            Logger.getLogger(JFCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        switch (comprobarResultadoServidor(this.puntosCliente)) {
                            case 0:
                                resultado = "Han quedado empatados";
                                break;
                            case -1:
                                resultado = "Has perdido.\n GAME OVER :(";
                                break;
                            case 1:
                                resultado = "Has ganado. 춰Enhorabuena!";
                                break;
                        }
                        JOptionPane.showMessageDialog(this, resultado);
                        this.dispose(); // Cierra la ventana del servidor
                    }
                }
            }
        });

        juegoThread.start();
    }

    /**
     * Comprueba el resultado del juego comparando los puntos del servidor y del
     * cliente.
     *
     * @param puntosCliente Puntos obtenidos por el cliente
     * @return Valor que indica el resultado: 0 (empate), -1 (derrota), 1
     * (victoria)
     */
    private synchronized int comprobarResultadoServidor(int puntosCliente) {
        int recuentoPuntos = 0;
        if (this.juego.getPuntos() > puntosCliente) {
            recuentoPuntos = 1;
        } else if (puntosCliente > this.juego.getPuntos()) {
            recuentoPuntos = -1;
        }
        return recuentoPuntos;
    }

    /**
     * Modifica el estado de los botones de respuesta (activados o
     * desactivados).
     *
     * @param estado Estado a establecer (true para activar, false para
     * desactivar)
     */
    private void modificarEstado(boolean estado) {
        this.opcion1Servidor.setEnabled(estado);
        this.opcion2Servidor.setEnabled(estado);
        this.opcion3Servidor.setEnabled(estado);
        this.opcion4Servidor.setEnabled(estado);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFServidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Spuntos;
    private javax.swing.JButton btEmpezarJuego;
    private javax.swing.JLabel indicadorRondaServidor;
    private javax.swing.JLabel limiteRondas;
    private javax.swing.JLabel numeroRondas;
    private javax.swing.JButton opcion1Servidor;
    private javax.swing.JButton opcion2Servidor;
    private javax.swing.JButton opcion3Servidor;
    private javax.swing.JButton opcion4Servidor;
    private javax.swing.JLabel preguntaServidor;
    private javax.swing.JLabel puntosServidor;
    // End of variables declaration//GEN-END:variables
}
