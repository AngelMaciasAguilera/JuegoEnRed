/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import controladores.ConServidor;
import java.io.IOException;
import java.net.Socket;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import modelos.*;

/**
 *
 * @author Angel
 */
public class JFServidor extends javax.swing.JFrame {

    private ConServidor cs;
    private boolean haContestado = false;
    private boolean haFinalizado = false;
    private Juego juego;
    private int puerto = 6010;
    private String respuestaCorrecta = "";
    private String respuestaElegida = "";
    private String nombre = "Servidor";

    /**
     * Creates new form JFPrincipal
     */
    public JFServidor() {
        initComponents();
        cs = new ConServidor(nombre, puerto);
        juego = new Juego();
        this.puntosServidor.setText(String.valueOf(this.juego.getPuntos()));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preguntaServidor = new javax.swing.JLabel();
        opcion1Servidor = new javax.swing.JButton();
        opcion2Servidor = new javax.swing.JButton();
        opcion3Servidor = new javax.swing.JButton();
        opcion4Servidor = new javax.swing.JButton();
        btEmpezarJuego = new javax.swing.JButton();
        Spuntos = new javax.swing.JLabel();
        puntosServidor = new javax.swing.JLabel();
        numeroRondas = new javax.swing.JLabel();
        indicadorRonda = new javax.swing.JLabel();
        limiteRondas = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        preguntaServidor.setText("Pregunta");

        opcion1Servidor.setText("jButton1");
        opcion1Servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion1ServidorActionPerformed(evt);
            }
        });

        opcion2Servidor.setText("jButton2");
        opcion2Servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion2ServidorActionPerformed(evt);
            }
        });

        opcion3Servidor.setText("jButton3");
        opcion3Servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion3ServidorActionPerformed(evt);
            }
        });

        opcion4Servidor.setText("jButton4");
        opcion4Servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcion4ServidorActionPerformed(evt);
            }
        });

        btEmpezarJuego.setText("Empezar partida");
        btEmpezarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEmpezarJuegoActionPerformed(evt);
            }
        });

        Spuntos.setText("Puntos:");

        puntosServidor.setText("0");

        numeroRondas.setText("Ronda:");

        indicadorRonda.setText("1");

        limiteRondas.setText("/15");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(Spuntos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(puntosServidor)
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(preguntaServidor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(opcion1Servidor, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                            .addComponent(opcion2Servidor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(opcion3Servidor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(opcion4Servidor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(numeroRondas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(indicadorRonda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limiteRondas)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE)
                .addComponent(btEmpezarJuego)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btEmpezarJuego))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numeroRondas)
                            .addComponent(indicadorRonda)
                            .addComponent(limiteRondas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Spuntos)
                                .addComponent(puntosServidor))
                            .addComponent(preguntaServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(39, 39, 39)
                .addComponent(opcion1Servidor)
                .addGap(35, 35, 35)
                .addComponent(opcion2Servidor)
                .addGap(43, 43, 43)
                .addComponent(opcion3Servidor)
                .addGap(32, 32, 32)
                .addComponent(opcion4Servidor)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btEmpezarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEmpezarJuegoActionPerformed
        Thread hiloEspera = new Thread(() -> {
            try {
                // Muestra la ventana de espera mientras se está esperando a que un cliente se conecte
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(this, "Esperando a que algún cliente se conecte...");

                });
                // Espera a que algún cliente se conecte
                cs.notificarInicioJuego(cs.getServidor().accept());
                this.btEmpezarJuego.setEnabled(false);
                fJuego();
                JOptionPane.showMessageDialog(this, "Se ha conectado un cliente correctamente");
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        });
        // Inicia el hilo de espera
        hiloEspera.start();
        
        

    }//GEN-LAST:event_btEmpezarJuegoActionPerformed

    private void opcion1ServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion1ServidorActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion1Servidor.getText();
    }//GEN-LAST:event_opcion1ServidorActionPerformed

    private void opcion2ServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion2ServidorActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion2Servidor.getText();
    }//GEN-LAST:event_opcion2ServidorActionPerformed

    private void opcion3ServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion3ServidorActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion3Servidor.getText();
    }//GEN-LAST:event_opcion3ServidorActionPerformed

    private void opcion4ServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcion4ServidorActionPerformed
        this.haContestado = true;
        this.respuestaElegida = opcion4Servidor.getText();
    }//GEN-LAST:event_opcion4ServidorActionPerformed

    //Metodos auxiliares 
    private void modificarPregunta() {
        Pregunta pregunta = juego.obtenerPreguntaAleatoria();

        // Verifica si la pregunta obtenida es nula
        if (pregunta == null) {
            System.out.println("Pregunta invalida.");
            return;
        }

        this.preguntaServidor.setText(pregunta.getPregunta());
        List<String> posiblesRespuestas = pregunta.getPosiblesRespuestas();

        // Verifica si hay al menos 4 posibles respuestas
        if (posiblesRespuestas.size() < 4) {
            System.out.println("La pregunta no tiene suficientes respuestas.");
            haFinalizado = true;
            return;
        }

        this.opcion1Servidor.setText(posiblesRespuestas.get(0));
        this.opcion2Servidor.setText(posiblesRespuestas.get(1));
        this.opcion3Servidor.setText(posiblesRespuestas.get(2));
        this.opcion4Servidor.setText(posiblesRespuestas.get(3));
        this.respuestaCorrecta = pregunta.getRespuesta();
    }

    private void fJuego() {
        
        Thread juegoThread = new Thread(() -> {
            int puntos = 0;
            for (int i = 1; i < 16; i++) {
                this.indicadorRonda.setText(String.valueOf(i));
                SwingUtilities.invokeLater(() -> {
                    modificarPregunta();
                    modificarEstado(true); // Habilitar botones
                });

                // Esperar hasta que el usuario haya contestado
                while (!haContestado) {
                    try {
                        Thread.sleep(100); // Puedes ajustar el tiempo de espera según tus necesidades
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                if (this.respuestaElegida.equals(this.respuestaCorrecta)) {
                    this.juego.setPuntos(60);
                    this.puntosServidor.setText(String.valueOf(this.juego.getPuntos()));
                }

                // Una vez que el usuario ha contestado, modificar la pregunta nuevamente
                SwingUtilities.invokeLater(() -> {
                    modificarPregunta();
                });

                haContestado = false; // Reiniciar la bandera después de la respuesta
                if (i == 15) {
                    modificarEstado(false);
                    this.preguntaServidor.setText("El juego ha finalizado si quiere puede jugar otra ronda");
                    this.opcion1Servidor.setText("Finalizado");
                    this.opcion2Servidor.setText("Finalizado");
                    this.opcion3Servidor.setText("Finalizado");
                    this.opcion4Servidor.setText("Finalizado");
                }
            }
        });

        juegoThread.start();

    }

    private void modificarEstado(boolean estado) {
        this.opcion1Servidor.setEnabled(estado);
        this.opcion2Servidor.setEnabled(estado);
        this.opcion3Servidor.setEnabled(estado);
        this.opcion4Servidor.setEnabled(estado);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFServidor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Spuntos;
    private javax.swing.JButton btEmpezarJuego;
    private javax.swing.JLabel indicadorRonda;
    private javax.swing.JLabel limiteRondas;
    private javax.swing.JLabel numeroRondas;
    private javax.swing.JButton opcion1Servidor;
    private javax.swing.JButton opcion2Servidor;
    private javax.swing.JButton opcion3Servidor;
    private javax.swing.JButton opcion4Servidor;
    private javax.swing.JLabel preguntaServidor;
    private javax.swing.JLabel puntosServidor;
    // End of variables declaration//GEN-END:variables
}
